public class JvmComprehension {

    public static void main(String[] args) { // JvmComprehension.java компилируется в байт-код - файл JvmComprehension.class.
        // Далее ClassLoader загружает этот байт-код (т.е. этот класс) в JVM. Используется три класслоадера,
        // делегирующие загрузку классов по принципу - управление передается родительскому загрузчику, который находится
        // по иерархии на уровень выше. При этом выделяется область памяти - метаспэйс, где хранится информация с данными
        // о классе и константами. Также выделяются области памяти для хип (куча) и для стэка. В момент вызова
        // метода main() в стэке создается фрейм этого метода.
        int i = 1;                      // 1 - в фрейм метода main() помещается примитивная переменная типа int со значением;
        Object o = new Object();        // 2 - в куче выделяется память для объекта 'о' типа Object и в фрэйм метода main()
        // помещается переменная со ссылкой на этот объект в куче;
        Integer ii = 2;                 // 3 - в куче выделяется память для объекта 'ii' типа Integer и в фрэйм метода main()
        // помещается переменная со ссылкой на этот объект в куче;
        printAll(o, i, ii);             // 4 - в стэке создается фрейм метода printAll()
        System.out.println("finished"); // 7 - в стэке создаётся новый фрейм со сылкой на строку "finished";
    }

    private static void printAll(Object o, int i, Integer ii) { //в стэке создаётся новый фрейм; в фрейм метода printAll()
        // помещаются переменные со ссылками на объекты 'о' и 'ii' и примитивная переменная типа int со значением;
        Integer uselessVar = 700;                   // 5 - в куче выделяется память для объекта 'uselessVar' типа Integer
        // и в фрэйм метода main() помещается переменная со ссылкой на этот объект в куче;
        System.out.println(o.toString() + i + ii);  // 6 - в стэке создаётся новый фрейм, туда помещаются переменная со ссылкой на
        // объект 'ii' и примитивная переменной типа int со значением, а также в стэке создаётся ещё один фрейм метода toString();
    }
} // методы после завершения 'уходят' из стэка; сборщиком мусора периодически, при выполнении программы, происходит сборка мусора (в куче удаляются неиспользуемые
// объекты - те на которые больше не ссылается ни одна переменная), для сборки мусора происходит приостановка программы -
// Stop The World пауза - это полная остановка потоков программы для безопасной сборки мусора.